<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd">
		

		
		<!-- 초창기 Spring 이  mvc프레임웍으로써 훌륭하기는 했지만, 기능이 많아질수록 즉 요청이 늘어날수록 
		설정 파일의 내용이 너무많이 늘어나서 오히려 유지보수성이 떨어짐 
		전세계 개발자들의 끊임없는 요청을 수용하여, 설정파일의 간소화를 시도하기 시작함(핵심 원리 : @어노테이션)-->
		
		<!-- 빈즈가 될 객체들을 스프링이 스스로 검색하여 자동으로 인스턴스를 만들게 해보자 
			단, 무조건 인스턴스를 생성해주는것이 아니라, 해당 빈이 반드시 스프링이 이해하는 컴포넌트중 하나이어야 한다.
			스프링의 컴포넌트 : 	
									컴포넌트 	-> @Component
									컨트롤러 	-> @Controller 컴포넌트
									DAO 		-> @Repository 컴포넌트
									서비스 		-> @Service 컴포넌트
									
		-->
		<annotation-driven/>
		
		<!-- 우리가 정의한 객체 중 싱글턴으로 정의한 객체를 빈으로 등록해보자-->
		<beans:bean id="mybatisConfigManager" 
		class="com.academy.springmvcsimple.mybatis.MybatisConfigManager" factory-method="getInstance"/>
		
		<context:component-scan base-package="com.academy.springmvcsimple"/>
		
		
		 <!-- 현재 우리가 사용중인 프레임웍은 mvc패턴이 적용되었기 때문에, 웹어플리케이션내의 모든 ~~~요청은
		 	하나의 진입점인 DispathcerServlet을 거쳐서 처리된다. 이때 DispatcherServlet이 정적자원인 이미지,html
		 	css,js등을 별도로 요청처리하지 않으면, 클라이언트는 적절한 결과를 볼수 없다.
		 	해결책) 정적 자원까지, 개발자가 요청을 별도로 처리하지 마록, 시스템이 알아서 처리하도록 하자
		 	
		  -->
	  	<resources location="/resources/" mapping="/resources/**" ></resources> 
		
		
		<!-- 뷰매핑을 담당해주는 뷰리절버 등록하자, 이때 우리가 선택한 뷰리절버는 internalresourceViewResolver이고,
		얘는, 접두어, 접미어 조합을 이용하여 최종적으로 jsp경로를 반환해준다 -->
		<beans:bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver" 
		p:prefix="/"  
		p:suffix=".jsp"/>
		
		
</beans:beans>
